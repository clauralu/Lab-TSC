# 0
# vsim +notimingchecks +nowarnTSCALE +NR_OF_TRANSACTIONS=5 -sva -nocoverage -quiet -sv_seed 8557488 -novopt top 
# //  ModelSim SE 6.6d Nov  1 2010 
# //
# //  Copyright 1991-2010 Mentor Graphics Corporation
# //              All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND 
# //  PROPRIETARY INFORMATION WHICH IS THE PROPERTY
# //  OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
# //  AND IS SUBJECT TO LICENSE TERMS.
# //
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(91): Clocking block output lab2_if.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(92): Clocking block output lab2_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(93): Clocking block output lab2_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(90): Clocking block output lab2_if.cb.write_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(98): Clocking block output lab2_if.cb.read_pointer is not legal in this
# or another expression.
#         Region: /top/test
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# first header
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode    = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 1: 
#   opcode    = 5 (MULT)
#   operand_a = 9
#   operand_b = 2
# 
# Writing to register location 2: 
#   opcode    = 0 (ZERO)
#   operand_a = 8
#   operand_b = 4
# 
# Writing to register location 3: 
#   opcode    = 5 (MULT)
#   operand_a = 15
#   operand_b = 14
# 
# Writing to register location 4: 
#   opcode    = 4 (SUB)
#   operand_a = 0
#   operand_b = 12
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode    = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   result    = -9
# 
# ** Error: SUB operation error: Expected result = -6, Actual result = -9
# 
#    Time: 75 ns  Scope: top.test.first_test.checker_results File: ../test/instr_register_class.svh Line: 128
# Read from register location 1: 
#   opcode    = 5 (MULT)
#   operand_a = 9
#   operand_b = 2
#   result    = 18
# 
# Read from register location 2: 
#   opcode    = 0 (ZERO)
#   operand_a = 8
#   operand_b = 4
#   result    = 0
# 
# Read from register location 3: 
#   opcode    = 5 (MULT)
#   operand_a = 15
#   operand_b = 14
#   result    = 210
# 
# Read from register location 4: 
#   opcode    = 4 (SUB)
#   operand_a = 0
#   operand_b = 12
#   result    = -15
# 
# ** Error: SUB operation error: Expected result = -12, Actual result = -15
# 
#    Time: 115 ns  Scope: top.test.first_test.checker_results File: ../test/instr_register_class.svh Line: 128
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# TEST FAILED: 2 errors!
# 
# ** Note: $finish    : ../test/instr_register_class.svh(70)
#    Time: 120 ns  Iteration: 2  Instance: /top/test
