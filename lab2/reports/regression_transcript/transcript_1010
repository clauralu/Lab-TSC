# 1
# Model Technology ModelSim SE vlog 6.6d Compiler 2010.11 Nov  1 2010
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling interface tb_ifc
# -- Compiling module top
# 
# Top level modules:
# 	top
# vsim +notimingchecks +nowarnTSCALE +NR_OF_TRANSACTIONS=50 -sva -nocoverage -quiet -sv_seed 1010 -novopt top 
# Refreshing D:\lab\lab_TSC\lab2\sim\work.instr_register_pkg
# Refreshing D:\lab\lab_TSC\lab2\sim\work.top
# Refreshing D:\lab\lab_TSC\lab2\sim\work.tb_ifc
# Refreshing D:\lab\lab_TSC\lab2\sim\work.instr_register_test
# Refreshing D:\lab\lab_TSC\lab2\sim\work.instr_register
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(20): Clocking block output #parent#.lab2_if.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(11): Clocking block output #parent#.lab2_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(16): Clocking block output #parent#.lab2_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(20): Clocking block output #parent#.lab2_if.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(11): Clocking block output #parent#.lab2_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(16): Clocking block output #parent#.lab2_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(112): Clocking block output lab2_if.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(113): Clocking block output lab2_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(114): Clocking block output lab2_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(111): Clocking block output lab2_if.cb.write_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../test/instr_register_class.svh(119): Clocking block output lab2_if.cb.read_pointer is not legal in this
# or another expression.
#         Region: /top/test
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# first header
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode    = 7 (MOD)
#   operand_a = 1
#   operand_b = 12
# 
# Writing to register location 1: 
#   opcode    = 5 (MULT)
#   operand_a = 15
#   operand_b = 1
# 
# Writing to register location 2: 
#   opcode    = 6 (DIV)
#   operand_a = 0
#   operand_b = 14
# 
# Writing to register location 3: 
#   opcode    = 6 (DIV)
#   operand_a = -5
#   operand_b = 10
# 
# Writing to register location 4: 
#   opcode    = 2 (PASSB)
#   operand_a = -8
#   operand_b = 12
# 
# Writing to register location 5: 
#   opcode    = 4 (SUB)
#   operand_a = 10
#   operand_b = 9
# 
# Writing to register location 6: 
#   opcode    = 1 (PASSA)
#   operand_a = -1
#   operand_b = 8
# 
# Writing to register location 7: 
#   opcode    = 6 (DIV)
#   operand_a = -11
#   operand_b = 9
# 
# Writing to register location 8: 
#   opcode    = 5 (MULT)
#   operand_a = -6
#   operand_b = 9
# 
# Writing to register location 9: 
#   opcode    = 1 (PASSA)
#   operand_a = 12
#   operand_b = 8
# 
# Writing to register location 10: 
#   opcode    = 7 (MOD)
#   operand_a = -15
#   operand_b = 5
# 
# Writing to register location 11: 
#   opcode    = 7 (MOD)
#   operand_a = -11
#   operand_b = 14
# 
# Writing to register location 12: 
#   opcode    = 7 (MOD)
#   operand_a = -1
#   operand_b = 6
# 
# Writing to register location 13: 
#   opcode    = 5 (MULT)
#   operand_a = 7
#   operand_b = 0
# 
# Writing to register location 14: 
#   opcode    = 7 (MOD)
#   operand_a = 7
#   operand_b = 7
# 
# Writing to register location 15: 
#   opcode    = 1 (PASSA)
#   operand_a = 0
#   operand_b = 11
# 
# Writing to register location 16: 
#   opcode    = 0 (ZERO)
#   operand_a = 7
#   operand_b = 12
# 
# Writing to register location 17: 
#   opcode    = 0 (ZERO)
#   operand_a = 3
#   operand_b = 7
# 
# Writing to register location 18: 
#   opcode    = 2 (PASSB)
#   operand_a = 10
#   operand_b = 9
# 
# Writing to register location 19: 
#   opcode    = 0 (ZERO)
#   operand_a = -7
#   operand_b = 3
# 
# Writing to register location 20: 
#   opcode    = 0 (ZERO)
#   operand_a = -15
#   operand_b = 6
# 
# Writing to register location 21: 
#   opcode    = 3 (ADD)
#   operand_a = 15
#   operand_b = 10
# 
# Writing to register location 22: 
#   opcode    = 2 (PASSB)
#   operand_a = 10
#   operand_b = 15
# 
# Writing to register location 23: 
#   opcode    = 0 (ZERO)
#   operand_a = 3
#   operand_b = 10
# 
# Writing to register location 24: 
#   opcode    = 1 (PASSA)
#   operand_a = -2
#   operand_b = 6
# 
# Writing to register location 25: 
#   opcode    = 1 (PASSA)
#   operand_a = -9
#   operand_b = 12
# 
# Writing to register location 26: 
#   opcode    = 6 (DIV)
#   operand_a = -13
#   operand_b = 13
# 
# Writing to register location 27: 
#   opcode    = 7 (MOD)
#   operand_a = -10
#   operand_b = 15
# 
# Writing to register location 28: 
#   opcode    = 2 (PASSB)
#   operand_a = -1
#   operand_b = 15
# 
# Writing to register location 29: 
#   opcode    = 1 (PASSA)
#   operand_a = 12
#   operand_b = 4
# 
# Writing to register location 30: 
#   opcode    = 7 (MOD)
#   operand_a = 9
#   operand_b = 1
# 
# Writing to register location 31: 
#   opcode    = 2 (PASSB)
#   operand_a = -4
#   operand_b = 15
# 
# Writing to register location 0: 
#   opcode    = 6 (DIV)
#   operand_a = 14
#   operand_b = 11
# 
# Writing to register location 1: 
#   opcode    = 5 (MULT)
#   operand_a = -6
#   operand_b = 12
# 
# Writing to register location 2: 
#   opcode    = 5 (MULT)
#   operand_a = 13
#   operand_b = 8
# 
# Writing to register location 3: 
#   opcode    = 1 (PASSA)
#   operand_a = -2
#   operand_b = 10
# 
# Writing to register location 4: 
#   opcode    = 5 (MULT)
#   operand_a = 8
#   operand_b = 15
# 
# Writing to register location 5: 
#   opcode    = 6 (DIV)
#   operand_a = 1
#   operand_b = 3
# 
# Writing to register location 6: 
#   opcode    = 6 (DIV)
#   operand_a = 0
#   operand_b = 2
# 
# Writing to register location 7: 
#   opcode    = 3 (ADD)
#   operand_a = 14
#   operand_b = 3
# 
# Writing to register location 8: 
#   opcode    = 0 (ZERO)
#   operand_a = -1
#   operand_b = 15
# 
# Writing to register location 9: 
#   opcode    = 6 (DIV)
#   operand_a = 9
#   operand_b = 4
# 
# Writing to register location 10: 
#   opcode    = 5 (MULT)
#   operand_a = -4
#   operand_b = 10
# 
# Writing to register location 11: 
#   opcode    = 0 (ZERO)
#   operand_a = 6
#   operand_b = 6
# 
# Writing to register location 12: 
#   opcode    = 0 (ZERO)
#   operand_a = -9
#   operand_b = 7
# 
# Writing to register location 13: 
#   opcode    = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# 
# Writing to register location 14: 
#   opcode    = 1 (PASSA)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 15: 
#   opcode    = 0 (ZERO)
#   operand_a = -14
#   operand_b = 15
# 
# Writing to register location 16: 
#   opcode    = 7 (MOD)
#   operand_a = -10
#   operand_b = 5
# 
# Writing to register location 17: 
#   opcode    = 2 (PASSB)
#   operand_a = -6
#   operand_b = 8
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode    = 6 (DIV)
#   operand_a = 14
#   operand_b = 11
#   result    = 1
# 
# Read from register location 1: 
#   opcode    = 5 (MULT)
#   operand_a = -6
#   operand_b = 12
#   result    = -72
# 
# Read from register location 2: 
#   opcode    = 5 (MULT)
#   operand_a = 13
#   operand_b = 8
#   result    = 104
# 
# Read from register location 3: 
#   opcode    = 1 (PASSA)
#   operand_a = -2
#   operand_b = 10
#   result    = -2
# 
# Read from register location 4: 
#   opcode    = 5 (MULT)
#   operand_a = 8
#   operand_b = 15
#   result    = 120
# 
# Read from register location 5: 
#   opcode    = 6 (DIV)
#   operand_a = 1
#   operand_b = 3
#   result    = 0
# 
# Read from register location 6: 
#   opcode    = 6 (DIV)
#   operand_a = 0
#   operand_b = 2
#   result    = 0
# 
# Read from register location 7: 
#   opcode    = 3 (ADD)
#   operand_a = 14
#   operand_b = 3
#   result    = 17
# 
# Read from register location 8: 
#   opcode    = 0 (ZERO)
#   operand_a = -1
#   operand_b = 15
#   result    = 0
# 
# Read from register location 9: 
#   opcode    = 6 (DIV)
#   operand_a = 9
#   operand_b = 4
#   result    = 2
# 
# Read from register location 10: 
#   opcode    = 5 (MULT)
#   operand_a = -4
#   operand_b = 10
#   result    = -40
# 
# Read from register location 11: 
#   opcode    = 0 (ZERO)
#   operand_a = 6
#   operand_b = 6
#   result    = 0
# 
# Read from register location 12: 
#   opcode    = 0 (ZERO)
#   operand_a = -9
#   operand_b = 7
#   result    = 0
# 
# Read from register location 13: 
#   opcode    = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
#   result    = -17
# 
# ** Error: SUB operation error: Expected result = -14, Actual result = -17
# 
#    Time: 655 ps  Scope: top.test.first_test.checker_results File: ../test/instr_register_class.svh Line: 149
# Read from register location 14: 
#   opcode    = 1 (PASSA)
#   operand_a = 0
#   operand_b = 6
#   result    = 0
# 
# Read from register location 15: 
#   opcode    = 0 (ZERO)
#   operand_a = -14
#   operand_b = 15
#   result    = 0
# 
# Read from register location 16: 
#   opcode    = 7 (MOD)
#   operand_a = -10
#   operand_b = 5
#   result    = 0
# 
# Read from register location 17: 
#   opcode    = 2 (PASSB)
#   operand_a = -6
#   operand_b = 8
#   result    = 8
# 
# Read from register location 18: 
#   opcode    = 2 (PASSB)
#   operand_a = 10
#   operand_b = 9
#   result    = 9
# 
# Read from register location 19: 
#   opcode    = 0 (ZERO)
#   operand_a = -7
#   operand_b = 3
#   result    = 0
# 
# Read from register location 20: 
#   opcode    = 0 (ZERO)
#   operand_a = -15
#   operand_b = 6
#   result    = 0
# 
# Read from register location 21: 
#   opcode    = 3 (ADD)
#   operand_a = 15
#   operand_b = 10
#   result    = 25
# 
# Read from register location 22: 
#   opcode    = 2 (PASSB)
#   operand_a = 10
#   operand_b = 15
#   result    = 15
# 
# Read from register location 23: 
#   opcode    = 0 (ZERO)
#   operand_a = 3
#   operand_b = 10
#   result    = 0
# 
# Read from register location 24: 
#   opcode    = 1 (PASSA)
#   operand_a = -2
#   operand_b = 6
#   result    = -2
# 
# Read from register location 25: 
#   opcode    = 1 (PASSA)
#   operand_a = -9
#   operand_b = 12
#   result    = -9
# 
# Read from register location 26: 
#   opcode    = 6 (DIV)
#   operand_a = -13
#   operand_b = 13
#   result    = -1
# 
# Read from register location 27: 
#   opcode    = 7 (MOD)
#   operand_a = -10
#   operand_b = 15
#   result    = -10
# 
# Read from register location 28: 
#   opcode    = 2 (PASSB)
#   operand_a = -1
#   operand_b = 15
#   result    = 15
# 
# Read from register location 29: 
#   opcode    = 1 (PASSA)
#   operand_a = 12
#   operand_b = 4
#   result    = 12
# 
# Read from register location 30: 
#   opcode    = 7 (MOD)
#   operand_a = 9
#   operand_b = 1
#   result    = 0
# 
# Read from register location 31: 
#   opcode    = 2 (PASSB)
#   operand_a = -4
#   operand_b = 15
#   result    = 15
# 
# Read from register location 0: 
#   opcode    = 6 (DIV)
#   operand_a = 14
#   operand_b = 11
#   result    = 1
# 
# Read from register location 1: 
#   opcode    = 5 (MULT)
#   operand_a = -6
#   operand_b = 12
#   result    = -72
# 
# Read from register location 2: 
#   opcode    = 5 (MULT)
#   operand_a = 13
#   operand_b = 8
#   result    = 104
# 
# Read from register location 3: 
#   opcode    = 1 (PASSA)
#   operand_a = -2
#   operand_b = 10
#   result    = -2
# 
# Read from register location 4: 
#   opcode    = 5 (MULT)
#   operand_a = 8
#   operand_b = 15
#   result    = 120
# 
# Read from register location 5: 
#   opcode    = 6 (DIV)
#   operand_a = 1
#   operand_b = 3
#   result    = 0
# 
# Read from register location 6: 
#   opcode    = 6 (DIV)
#   operand_a = 0
#   operand_b = 2
#   result    = 0
# 
# Read from register location 7: 
#   opcode    = 3 (ADD)
#   operand_a = 14
#   operand_b = 3
#   result    = 17
# 
# Read from register location 8: 
#   opcode    = 0 (ZERO)
#   operand_a = -1
#   operand_b = 15
#   result    = 0
# 
# Read from register location 9: 
#   opcode    = 6 (DIV)
#   operand_a = 9
#   operand_b = 4
#   result    = 2
# 
# Read from register location 10: 
#   opcode    = 5 (MULT)
#   operand_a = -4
#   operand_b = 10
#   result    = -40
# 
# Read from register location 11: 
#   opcode    = 0 (ZERO)
#   operand_a = 6
#   operand_b = 6
#   result    = 0
# 
# Read from register location 12: 
#   opcode    = 0 (ZERO)
#   operand_a = -9
#   operand_b = 7
#   result    = 0
# 
# Read from register location 13: 
#   opcode    = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
#   result    = -17
# 
# ** Error: SUB operation error: Expected result = -14, Actual result = -17
# 
#    Time: 975 ps  Scope: top.test.first_test.checker_results File: ../test/instr_register_class.svh Line: 149
# Read from register location 14: 
#   opcode    = 1 (PASSA)
#   operand_a = 0
#   operand_b = 6
#   result    = 0
# 
# Read from register location 15: 
#   opcode    = 0 (ZERO)
#   operand_a = -14
#   operand_b = 15
#   result    = 0
# 
# Read from register location 16: 
#   opcode    = 7 (MOD)
#   operand_a = -10
#   operand_b = 5
#   result    = 0
# 
# Read from register location 17: 
#   opcode    = 2 (PASSB)
#   operand_a = -6
#   operand_b = 8
#   result    = 8
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# TEST FAILED: 2 errors!
# 
# ** Note: $finish    : ../test/instr_register_class.svh(91)
#    Time: 1020 ps  Iteration: 2  Instance: /top/test
# 1
# Break in Task run at ../test/instr_register_class.svh line 91
# Simulation Breakpoint: 1
# Break in Task run at ../test/instr_register_class.svh line 91
# MACRO ./run.do PAUSED at line 46
coverage report -html
# Report created in covhtmlreport/index.html
coverage report -html -details
# ** Error: (vsim-4003) Invalid option '-details'.
# coverage report -html [-htmldir <outdir>] [-nodetails] [-noframes] [-noignorebins] [-binrhs]
#                       [-nosource] [-notestplan] [-precision <num>] [-summary] [-threshH <%>] [-threshL <%>] [-verbose]
#                       [-code [bcesf(t|x)]] [-assert] [-cvg] [-instance <pathname>] [-directive]
# 
